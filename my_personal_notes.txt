References:
https://github.com/devopsjourney1/jenkins-101
https://www.youtube.com/watch?v=6YZvp2GwT0A&t=2660s

***************************************************************

[ View file system of Jenkins running on Docker container ]

# This will open the bash shell of the jenkins container
1. docker exec -it jenkins-blueocean bash

-i # Interactive
-t # Allocate a pseudo-TTY -- needed for interactive shells

***************************************************************

[ View Jenkins Home directory ]
/var/jenkins_home

[ View workspace ]
/var/jenkins_home/workspace

***************************************************************

29 July 1:54AM notes:
ERROR="jenkins doesn't have label"

Cause: If using a VM as host, restarting the VM changes the alpine/socat IP.
Remember that alpine/socat is the network communication middleman between Jenkins and Docker

Solution: Identify the new IP of alpine/socat container by inspecting the Jenkins network
Then reconfigure the Jenkins Cloud agent Host URI to use the new alpine/socat container IP.

Initial script to spin up alpine/socat:
docker run -d --restart=always -p 127.0.0.1:2376:2375 --network jenkins -v /var/run/docker.sock:/var/run/docker.sock alpine/socat tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock

Additional suggestion from Google Gemini:
docker run -d --restart=always \
  --name socat-proxy-for-docker-host \ # <--- Give it a clear name!
  -p 127.0.0.1:2376:2375 \
  --network jenkins \
  -v /var/run/docker.sock:/var/run/docker.sock \
  alpine/socat tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock

For the Docker Host URI, change it from tcp://172.18.0.3:2375 to:
tcp://socat-proxy-for-docker-host:2375 (using the name you chose in the docker run command).

**I think is is a very good practice for this specific setup/requirement


***************************************************************

[ PIPELINE SYNTAX ]

https://www.jenkins.io/doc/book/pipeline/syntax/

For triggers: lookup "triggers" -- where triggers { pollSCM('H */4 * * 1-5') } can be found

***************************************************************

07/31/2025

Error encountered:

###
+ pip install requirements.txt
error: externally-managed-environment

× This environment is externally managed
╰─> 
    The system-wide python installation should be maintained using the system
    package manager (apk) only.
    
    If the package in question is not packaged already (and hence installable via
    "apk add py3-somepackage"), please consider installing it inside a virtual
    environment, e.g.:
    
    python3 -m venv /path/to/venv
    . /path/to/venv/bin/activate
    pip install mypackage
    
    To exit the virtual environment, run:
    
    deactivate
    
    The virtual environment is not deleted, and can be re-entered by re-sourcing
    the activate file.
    
    To automatically manage virtual environments, consider using pipx (from the
    pipx package).

note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
hint: See PEP 668 for the detailed specification.
###

Best advice so far is to create a virtual environment and do the pip install <package> there.
Earlier tried to create and activate venv but encountered this:

###
Building..
[Pipeline] sh
+ cd myapp
+ source .venv/bin/activate
/home/jenkins/workspace/jenkins-pipeline-1@tmp/durable-3c79fbcb/script.sh.copy: source: line 3: can't open '.venv/bin/activate': No such file or directory
###


This was easily solved by the --break-system-packages flag on the pipeline declaration:
pip install -r requirements.txt --break-system-packages

However, based on StackOverflow, this flag shouldn't be abused.
https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-every-time-i-use-pip-3

The most upvoted answer says:
"The proper way to install Python libraries and applications is to install them in a Python virtual environment whenever possible (the exceptions to this rule are quite rare)."


I think I need to create a virtual environment first, like the usual process:
cd /path/to/your/project
python -m venv venv
source venv/bin/activate